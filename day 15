#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include<algorithm>
#include <string>
#include<set>
#include <math.h>

using namespace std;

ifstream fin("test.in");
ofstream fout("test.out");

int dx[] = { -1,0,1,0 };
int dy[] = { 0,1,0,-1 };


void afisaremat(vector<string> v, int Xstart, int Ystart,int dir) {
	return;
	cout << "dir" << " " << dir << '\n';
	for (int i = 0; i < v.size(); i++) {
		for (int j = 0; j < v[i].size(); j++) {
			if (i == Xstart && j == Ystart) {
				if (v[i][j] != '.') {
					cout << "error";
				}
				cout << '@';
			}
			else {
				cout << v[i][j];
			}
		}
		cout << '\n';
	}
	cout << '\n';
}

set<pair<pair<int, int>,char>> puncte;

void dfs(vector<string>& v, int x, int y, int dir) {
	if (x < 0 || y < 0 || x >= v.size() || y >= v[0].size() || (v[x][y] != '[' && v[x][y] != ']')) {
		return;
	}
	if (puncte.find({ {x,y},v[x][y] }) != puncte.end()) {
		return;
	}
	if (v[x][y] == ']') {
		y--;
	}
	if (puncte.find({ {x,y},v[x][y] }) != puncte.end()) {
		return;
	}
	puncte.insert({ {x,y},v[x][y] });
	puncte.insert({{ x,y + 1 }, v[x][y + 1]});
	int nx = x + dx[dir];
	int ny = y + dy[dir];
	dfs(v,nx,ny,dir);
	dfs(v, nx, ny + 1, dir);
}

int main() {
	int n = 50;
	string s;
	vector<string> v2,v;
	while (fin >> s) {
		n--;	
		v.push_back(s);
		if (n == 0) {
			break;
		}
	}
	for (auto it : v) {
		string linie = "";
		for (auto it2 : it) {
			if (it2 == '#') {
				linie += "##";
			}
			else if (it2 == 'O') {
				linie += "[]";
			}
			else if(it2=='.'){
				linie += "..";
			}
			else if (it2 == '@') {
				linie += "@.";
			}
		}
		v2.push_back(linie);
	}
	v = v2;
	s = "";
	string ss;
	while (fin >> ss) {
		s += ss;
	}
	int Xstart = 0;
	int Ystart = 0;
	for (int i = 0; i < v.size(); i++) {
		for (int j = 0; j < v[i].size(); j++) {
			if (v[i][j] == '@') {
				Xstart = i;
				Ystart = j;
				v[i][j] = '.';
			}
		}
	}
	for (auto it : s) {
		
		int dir = 0;
		if (it == '<') {
			dir = 3;
		}
		else if (it == '>') {
			dir = 1;
		}
		else if (it == '^') {
			dir = 0;
		}
		else if (it == 'v') {
			dir = 2;
		}
		afisaremat(v, Xstart, Ystart, dir);
		int nx = Xstart + dx[dir];
		int ny = Ystart + dy[dir];
		if (v[nx][ny] == '#') {
			continue;
		}
		else if (v[nx][ny] == '.') {
			Xstart = nx;
			Ystart = ny;
		}
		else if (v[nx][ny] == ']' || v[nx][ny]=='[') {
			bool areBlock = 0;
			auto pos = make_pair(nx, ny);
			int nx2 = nx;
			int ny2 = v[nx][ny]==']' ? ny-1 : ny+1;
			
			puncte.clear();
			if (v[nx][ny] == ']') {
				swap(nx2, nx);
				swap(ny2, ny);
			}
			dfs(v,nx, ny,dir);
			for (auto it : puncte) {
				int nx = it.first.first + dx[dir];
				int ny = it.first.second + dy[dir];
				if (v[nx][ny] == '#') {
					areBlock = 1;
					break;
				}
			}
			if (areBlock) {
				continue;
			}
			else {
				for (auto it : puncte) {
					v[it.first.first][it.first.second] = '.';
				}
				for (auto it : puncte) {
					int nx = it.first.first + dx[dir];
					int ny = it.first.second + dy[dir];
					v[nx][ny] = it.second;
				}
			}
			nx = pos.first;
			ny = pos.second;
			Xstart = nx;
			Ystart = ny;
		}
		
	}
	afisaremat(v, Xstart, Ystart,0);
	int res = 0;
	for (int i = 0;i < v.size();i++) {
		for (int j = 0; j < v[i].size(); j++) {
			if (v[i][j] == '[') {
				res += 100 * i + j;
			}
		}
	}
	cout << res;
}

