#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include<algorithm>
#include <string>
#include<set>
#include <math.h>
#include <stack>
#include <queue>

using namespace std;

ifstream fin("test.in");
ofstream fout("test.out");

int v[1000][1000];

vector<pair<int, int>> puncte;

string result;
map<pair<int, int>, int> m;

int bfs(int xStart, int yStart, int xEnd, int yEnd) {
	queue<pair<int, int>> q;
	q.push({ xStart, yStart });
	m[{xStart, yStart}] = 1;
	while (!q.empty()) {
		auto pos = q.front();
		int x = pos.first;
		int y = pos.second;
		//cout << x << " " << y << endl;
		q.pop();
		if (x == xEnd && y == yEnd) {
		//	cout << m[{x, y}] << endl;
			return m[{x, y}];
		}
		if (x + 1 <= xEnd && v[x + 1][y] != -1 && m[{x + 1, y}] == 0) {
			q.push({ x + 1, y });
			m[{x + 1, y}] = m[{x, y}] + 1;
		}
		if (y + 1 <= yEnd && v[x][y + 1] != -1 && m[{x, y + 1}] == 0) {
			q.push({ x, y + 1 });
			m[{x, y + 1}] = m[{x, y}] + 1;
		}
		if (x - 1 >= 0 && v[x - 1][y] != -1 && m[{x - 1, y}] == 0) {
			q.push({ x - 1, y });
			m[{x - 1, y}] = m[{x, y}] + 1;
		}
		if (y - 1 >= 0 && v[x][y - 1] != -1 && m[{x, y - 1}] == 0) {
			q.push({ x, y - 1 });
			m[{x, y - 1}] = m[{x, y}] + 1;
		}
	}
	return m[{xEnd, yEnd}];
}

bool simulare(int nrPuncte) {
	int xmax = 0, ymax = 0;
	xmax = ymax = 70;
	for (int i = 0;i <= xmax;i++) {
		for (int j = 0;j <= ymax;j++)
			v[i][j] = 0;
	}
	m.clear();
	for (int i = 0;i <= nrPuncte;i++)
		v[puncte[i].first][puncte[i].second] = -1;
	int result = bfs(0, 0, xmax, ymax);
	if (result == 0) {
		return false;
	}
	return true;
}

int main() {
	string s;
	int x, y;
	

	
	int nr = 0;
	while (fin >> y>>x) {
		puncte.push_back({ x, y });
	}
	
	int st = 0, dr = puncte.size() - 1;
	while (st <= dr) {
		int mij = (st + dr) / 2;
		if (simulare(mij)) {
			st = mij + 1;
		}
		else {
			dr = mij - 1;
		}
	}
	cout << st<<" "<<puncte[st].first<<" "<<puncte[st].second;

	
	return 0;
}

