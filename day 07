#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

ifstream fin("test.in");
ifstream fin2("test2.in");

long long addDigits(long long a, long long b) {
	long long bcop = b;
	int p = 1;
	while (bcop) {
		p *= 10;
		bcop /= 10;
	}
	return a * p + b;

}

long long solve1(vector<long long> v, long long sum) {
	long long n = v.size() - 1; // + / *

	for (long long j = 0; j < (1 << n); j++) {
		for (long long kk = 0; kk < (1 << n); kk++) {
			long long summ = v[0];
			long long prev = v[0];
			long long k = 0;
			for (long long i = 1; i < (1 << n); i *= 2) {
				if (j & i) {
					if (kk & i) {
						/// add digits to summ
						summ = addDigits(summ, v[k + 1]);
					}
					else {
						summ *= v[k + 1];
					}
				}
				else {
					summ += v[k + 1];
				}
				k++;
			}
			if (summ == sum) {
				return 1;
			}
		}
	}
	return 0;
}

int main() {
	vector<long long> v;
	long long sum = 0;
	long long part1 = 0;
	long long x;
	while (fin >> x) {
		if (x == 123456) {
			if (solve1(v, sum)) {
				part1 += sum;
			}
			fin >> x;
			sum = x;
			v.clear();
		}
		else {
			v.push_back(x);
		}
	}
	cout << part1 << endl;
	return 0;
}
