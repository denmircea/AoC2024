#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include<algorithm>
#include <string>
#include<set>
#include <math.h>
#include <stack>
#include <queue>
#include "aoc2024.h"

using namespace std;

ifstream fin("test.in");
ifstream fin2("test2.in");
ofstream fout("test.out");
map<char, pair<long long, long long>> mp, mpMic;
string levels;
string dfs3(char a, char b, long long level);
pair<long long, char>  dfs2(string input, long long level, char charPrev);
map < pair<pair<char, char>, long long>, string> memorizam; // avem char -- starting character, starting char 2 -- long long numarul de nivele pec are le rezolva
long long nivele = 24;
map < pair<char, char>, pair<pair<char, char>, long long > > posibilitati[26];
string dfs3(char a, char b, long long level) {
	auto p1 = mpMic[a];
	auto p2 = mpMic[b];
	long long x = p1.first - p2.first;
	long long y = p1.second - p2.second;
	// try to construct all paths frorm a to b, just manhattan
	long long upDown = 0;
	long long leftRight = 0;
	if (x > 0) {
		upDown = 1;
	}
	else if (x < 0) {
		upDown = -1;
	}
	if (y > 0) {
		leftRight = 1;
	}
	else if (y < 0) {
		leftRight = -1;
	}
	// create strings with each variant
	vector<pair<char, long long>> v;
	if (upDown == 1) {
		v.push_back({ '^', x });
	}
	else if (upDown == -1) {
		v.push_back({ 'v', -x });
	}
	if (leftRight == 1) {
		v.push_back({ '<', y });
	}
	else if (leftRight == -1) {
		v.push_back({ '>', -y });
	}
	vector<string> solutions;
	if (v.size() == 0) {
		solutions.push_back("A");
	}
	else if (v.size() == 1) {
		string aux = string(v[0].second, v[0].first);
		aux.push_back('A');
		solutions.push_back(aux);
	}
	else {
		string aux = "";
		auto InitPos = mpMic[a];
		bool valid = true;
		for (long long i = 0; i < v[0].second; i++) {
			aux += v[0].first;
			if (v[0].first == '^') {
				InitPos.first--;
			}
			else if (v[0].first == 'v') {
				InitPos.first++;
			}
			else if (v[0].first == '<') {
				InitPos.second--;
			}
			else if (v[0].first == '>') {
				InitPos.second++;
			}
			if (InitPos.first == 0 && InitPos.second == 0) {
				valid = false;
			}
		}
		for (long long i = 0; i < v[1].second; i++) {
			aux += v[1].first;
		}
		aux.push_back('A');
		if (valid) {
			solutions.push_back(aux);
		}
		valid = true;
		aux = "";
		InitPos = mpMic[a];
		for (long long i = 0; i < v[1].second; i++) {
			aux += v[1].first;
			if (v[1].first == '^') {
				InitPos.first--;
			}
			else if (v[1].first == 'v') {
				InitPos.first++;
			}
			else if (v[1].first == '<') {
				InitPos.second--;
			}
			else if (v[1].first == '>') {
				InitPos.second++;
			}
			if (InitPos.first == 0 && InitPos.second == 0) {
				valid = false;
			}
		}
		for (long long i = 0; i < v[0].second; i++) {
			aux += v[0].first;
		}
		aux.push_back('A');
		if (valid)
			solutions.push_back(aux);

	}
	if (solutions.size() == 2) {
		if (a == '^' && b == '>') {
			return solutions[0];
		}
		else if (a == 'v' && b == 'A') {
			return solutions[0];
		}
		else if (a == '>' && b == '^') {
			return solutions[1];
		}
		else if (a == 'A' && b == 'v') {
			return solutions[1];
		}
		
	}

	return solutions[0];
	

}
char charPrev = 'A';
pair<long long,char> dfs2(string input, long long level, char prev) {
	long long sum = 0;
	for(auto it:input){
		if (prev == it) {
			sum++;
			continue;
		}
		auto current = posibilitati[nivele][{prev, it}];
		auto prevv = posibilitati[nivele - 1][{prev, it}];
		sum += current.second;
		prev = it;
	}
	return { sum,prev };
}

long long dfs1(char a, char b) {
	auto p1 = mp[a];
	auto p2 = mp[b];
	long long x = p1.first - p2.first;
	long long y = p1.second - p2.second;
	// try to construct all paths frorm a to b, just manhattan
	long long upDown = 0;
	long long leftRight = 0;
	if (x > 0) {
		upDown = 1;
	}
	else if (x < 0) {
		upDown = -1;
	}
	if (y > 0) {
		leftRight = 1;
	}
	else if (y < 0) {
		leftRight = -1;
	}
	// create strings with each variant
	vector<pair<char, long long>> v;
	if (upDown == 1) {
		v.push_back({ '^', x });
	}
	else if (upDown == -1) {
		v.push_back({ 'v', -x });
	}
	if (leftRight == 1) {
		v.push_back({ '<', y });
	}
	else if (leftRight == -1) {
		v.push_back({ '>', -y });
	}
	vector<string> solutions;
	if (v.size() == 0) {
		solutions.push_back("A");
	}
	else if (v.size() == 1) {
		string aux = string(v[0].second, v[0].first);
		aux.push_back('A');
		solutions.push_back(aux);
	}
	else {
		string aux = "";
		auto InitPos = mp[a];
		bool valid = true;

		for (long long i = 0; i < v[0].second; i++) {
			aux += v[0].first;
			if (v[0].first == '^') {
				InitPos.first--;
			}
			else if (v[0].first == 'v') {
				InitPos.first++;
			}
			else if (v[0].first == '<') {
				InitPos.second--;
			}
			else if (v[0].first == '>') {
				InitPos.second++;
			}
			if (InitPos.first == 3 && InitPos.second == 0) {
				valid = false;
			}
		}

		for (long long i = 0; i < v[1].second; i++) {
			aux += v[1].first;
		}
		aux.push_back('A');
		if (valid) {
			solutions.push_back(aux);
		}
		valid = true;
		aux = "";
		InitPos = mp[a];
		for (long long i = 0; i < v[1].second; i++) {
			aux += v[1].first;
			if (v[1].first == '^') {
				InitPos.first--;
			}
			else if (v[1].first == 'v') {
				InitPos.first++;
			}
			else if (v[1].first == '<') {
				InitPos.second--;
			}
			else if (v[1].first == '>') {
				InitPos.second++;
			}
			if (InitPos.first == 3 && InitPos.second == 0) {
				valid = false;
			}
		}
		for (long long i = 0; i < v[0].second; i++) {
			aux += v[0].first;
		}
		aux.push_back('A');
		if (valid)
			solutions.push_back(aux);
	}
	auto res = make_pair(0LL,0LL);

	for (auto it : solutions) {
		auto aux = dfs2(it, 0, charPrev);
		if(res.first == 0 || aux.first < res.first)
			res = aux;
	}
	charPrev = res.second;
	return res.first;
}


int main() {
	mp['A'] = { 3,2 };
	mp['0'] = { 3,1 };
	mp['1'] = { 2,0 };
	mp['2'] = { 2,1 };
	mp['3'] = { 2,2 };
	mp['4'] = { 1,0 };
	mp['5'] = { 1,1 };
	mp['6'] = { 1,2 };
	mp['7'] = { 0,0 };
	mp['8'] = { 0,1 };
	mp['9'] = { 0,2 };
	mpMic['A'] = { 0,2 };
	mpMic['^'] = { 0,1 };
	mpMic['<'] = { 1,0 };
	mpMic['v'] = { 1,1 };
	mpMic['>'] = { 1,2 };

	string s;
	string toate = "A^<v>";
	for (auto it : toate) {
		for (auto it2 : toate) {
			string result  = dfs3(it, it2,0);
			
			posibilitati[0][{it, it2}] = { {result[0], result[result.size()-1]}, (long long)result.size()};
			//else cout << it << " " << it2 << endl;
		}
	}
	for (long long nivel = 1;nivel < 25;nivel++) {
		long long nivelPrev = nivel - 1;
		for (auto it : toate) {
			for (auto it2 : toate) {
				// toate combinatiile
				string result = dfs3(it, it2, 0);
				/*if (result.size() == 1) {
					continue;
				}*/
				char prev = 'A';
				bool firstOne = true;
				if (it == it2 && it == '^') {
					cout << it << " " << it2 << " " << result << endl;
				}
				for (auto itLocal : result) {
					auto current = posibilitati[nivel][{it, it2}];
					auto prevLevel = posibilitati[nivelPrev][{prev, itLocal}];
					
					if (firstOne) {
						if (prev == itLocal) {
							current.second++;
							posibilitati[nivel][{it, it2}] = current;

							continue;
						}
						current.first = prevLevel.first;
						firstOne = false;
					}
					if (itLocal == prev) {
						current.second++;
					}else 
					current.second += prevLevel.second;
					current.first.second = 'A';
					posibilitati[nivel][{it, it2}] = current;
					prev = itLocal;
				}
			}
		}
	}
	long long resp = 0;
	while (fin >> s) {
		long long sum = 0;
		auto it = 'A';
		charPrev = 'A';
		levels = string(nivele, 'A');
		for (auto i2 : s) {
			auto it2 = i2;
			//cout<< dfs1(it, it2).size()<<" ";
			auto res = dfs1(it, it2);
			//cout << res << endl;;
			sum += res;
			it = it2;
		}
		cout << sum << endl;
		long long nr = 0;
		for (auto i2 : s)
			if (i2 >= '0' && i2 <= '9')
				nr = nr * 10 + i2 - '0';
		resp += sum *nr;
	}

	cout << resp;
	return 0;
}
