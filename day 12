#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>

using namespace std;

ifstream fin("test.in");
ifstream fin2("test2.in");
vector<pair<int, int>> puncte;
int visit[1000][1000];
int visit2[1000][1000];

int dx[] = { -1,0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };


int n, m;
string s;
vector<string> v;

void dfs(int x, int y) {
	visit[x][y] = 1;
	puncte.push_back({ x, y });
	if (x - 1 >= 0 && visit[x - 1][y] == 0 && v[x - 1][y] == v[x][y]) {
		dfs(x - 1, y);
	}
	if (x + 1 < n && visit[x + 1][y] == 0 && v[x + 1][y] == v[x][y]) {
		dfs(x + 1, y);
	}
	if (y - 1 >= 0 && visit[x][y - 1] == 0 && v[x][y - 1] == v[x][y]) {
		dfs(x, y - 1);
	}
	if (y + 1 < m && visit[x][y + 1] == 0 && v[x][y + 1] == v[x][y]) {
		dfs(x, y + 1);
	}
}

int computePermieter(vector<pair<int, int>> p) {
	int perimeter = 0;
	set<pair<pair<int, int>,int>> neighbours;
	pair<int, int> start;
	int startDirection = 0;
	for (int i = 0; i < p.size(); i++) {
		int x = p[i].first;
		int y = p[i].second;
		/// check if neighbour is in p
		if (x - 1 < 0 || find(p.begin(), p.end(), make_pair(x - 1, y)) == p.end()) {
			neighbours.insert({ { x,y },0 });
			
		}
		if (x + 1 >= n || find(p.begin(), p.end(), make_pair(x + 1, y)) == p.end()) {
			neighbours.insert({ { x,y },2 });
		}
		if (y - 1 < 0 || find(p.begin(), p.end(), make_pair(x, y - 1)) == p.end()) {
			neighbours.insert({ { x,y },3 });
		}
		if (y + 1 >= m || find(p.begin(), p.end(), make_pair(x, y + 1)) == p.end()) {
			neighbours.insert({ { x,y },1 });
		}
	}
	set<pair<pair<int, int>, int>>visited;
	int sides = 0;
	for (auto it : neighbours) {
		if (visited.find(it) != visited.end()) {
			continue;
		}
		sides++;
		start = it.first;
		startDirection = it.second;
		if (startDirection == 0 || startDirection == 2) {
			// left / right

			while (1) {
				auto nextRight = make_pair(start.first, start.second + 1);
				if (neighbours.find({ nextRight,startDirection }) != neighbours.end()) {
					if (visited.find({ nextRight,startDirection }) != visited.end()) {
						cout << "error" << endl;
						break;
					}
					visited.insert({ nextRight,startDirection });
					start = nextRight;
				}
				else
					break;

			}
			start = it.first;
			while (1) {
				auto leftRight = make_pair(start.first, start.second - 1);
				if (neighbours.find({ leftRight,startDirection }) != neighbours.end()) {
					if (visited.find({ leftRight,startDirection }) != visited.end()) {
						cout << "error" << endl;
						break;
					}
					visited.insert({ leftRight,startDirection });
					start = leftRight;
				}
				else break;
			}
		}
		else {
			// up / down
			start = it.first;
			while (1) {
				auto nextRight = make_pair(start.first + 1, start.second);
				if (neighbours.find({ nextRight,startDirection }) != neighbours.end()) {
					if (visited.find({ nextRight,startDirection }) != visited.end()) {
						cout << "error" << endl;
						break;
					}
					visited.insert({ nextRight,startDirection });
					start = nextRight;
				}
				else break;
			}
			start = it.first;
			while (1) {
				auto leftRight = make_pair(start.first - 1, start.second);
				if (neighbours.find({ leftRight,startDirection }) != neighbours.end()) {
					if (visited.find({ leftRight,startDirection }) != visited.end()) {
						cout << "error" << endl;
						break;
					}
					visited.insert({ leftRight,startDirection });
					start = leftRight;
				}
				else break;
			}
		}
	}
	return sides;
}



int main() {
	int total = 0;
	while (fin >> s) {
		v.push_back(s);
	}
	n = v.size();
	m = v[0].size();
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (visit[i][j] == 0) {
				puncte.clear();
				dfs(i, j);
				cout << computePermieter(puncte) << endl;
				total += puncte.size() * computePermieter(puncte);
			}
		}
	}
	cout << total << endl;
}
