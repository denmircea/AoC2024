#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

ifstream fin("test.in");
ifstream fin2("test2.in");

map<int, int> m;
int vw[1000][1000];
int main()
{
	int x, y;
	while (fin >> x >> y) {
		vw[x][y] = 1;
	}
	// floyd
	
	/*for (int k = 0;k < 1000;k++) {
		for (int i = 0;i < 1000;i++) {
			for (int j = 0;j < 1000;j++) {
				if (vw[i][k]>0 && vw[k][j]>0) {
					vw[i][j] = 1;
				}
			}
		}
	}*/
	vector<int> v;
	int cnt = 0;
	while (fin2 >> x) {
		if (x == 1000) {
			while(1) {
			bool valid = true;
			for (int i = 0;i < v.size();i++) {
				for (int j = 0;j < v.size();j++) {
					if (i == j) continue;
					if (i < j) {
						if (vw[v[j]][v[i]] > 0  ) {
							swap(v[i], v[j]);
							valid = false;
							break;
						}
					}
					else if (i > j) {
						if (vw[v[i]][v[j]] > 0 ) {
							swap(v[i], v[j]);
							valid = false;
							break;
						}
					}

				}}

			if (valid) break;
			}
			cnt += v[v.size()/2];
			v.clear();
		}
		else {
			v.push_back(x);
		}
	}
	cout << cnt;
}

// part 2 = cnt - res1
